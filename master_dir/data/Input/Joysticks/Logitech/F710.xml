<?xml version="1.0"?>

<PropertyList>
  <name type="string">Controller (Wireless Gamepad F710)</name>

<nasal>
    <script><![CDATA[
        var gearState   = 0;
        var engineState = 0;
    ]]></script>
</nasal>


  <axis n="0">
    <desc type="string">View pan horizontally</desc>
    <binding>
      <command type="string">property-scale</command>
      <property type="string">/sim/current-view/goal-heading-offset-deg</property>
      <dead-band type="double">0</dead-band>
      <factor type="double">-180</factor>
      <offset type="double">0</offset>
      <power type="int">3</power>
  </binding>
  </axis>
  
  <axis n="1">
    <desc type="string">View pan vertically</desc>
    <binding>
      <command type="string">property-scale</command>
      <property type="string">/sim/current-view/goal-pitch-offset-deg</property>
      <dead-band type="double">0</dead-band>
      <factor type="double">90</factor>
      <offset type="double">0</offset>
      <power type="int">3</power>
    </binding>
  </axis>
  
  <axis n="2">
    <desc type="string">Rudder</desc>
    <binding>
      <command type="string">property-scale</command>
      <property type="string">/controls/flight/rudder</property>
      <dead-band type="double">0</dead-band>
      <factor type="double">-1</factor>
      <offset type="double">0</offset>
      <power type="int">2</power>
    </binding>
  </axis>
  
  <axis n="3">
    <desc type="string">Elevator</desc>
    <binding>
      <command type="string">property-scale</command>
      <property type="string">/controls/flight/elevator</property>
      <dead-band type="double">0</dead-band>
      <factor type="double">-1</factor>
      <offset type="double">0</offset>
      <power type="int">2</power>
    </binding>
  </axis>
  
  <axis n="4">
    <desc type="string">Aileron</desc>
    <binding>
      <command type="string">property-scale</command>
      <property type="string">/controls/flight/aileron</property>
      <dead-band type="double">0</dead-band>
      <factor type="double">1</factor>
      <offset type="double">0</offset>
      <power type="int">2</power>
    </binding>
  </axis>

    <button n="0">
        <desc>Decrease throttle</desc>
        <repeatable>true</repeatable>
        <binding>
            <command>nasal</command>
            <script>controls.incThrottle(-0.005, -1.0)</script>
        </binding>
     </button>

    <button n="1">
        <desc>Flaps Down</desc>
        <repeatable>false</repeatable>
        <binding>
            <command>nasal</command>
            <script>controls.flapsDown(1);</script>
        </binding>
        <mod-up>
            <binding>
                <command>nasal</command>
                <script>controls.flapsDown(0);</script>
            </binding>
        </mod-up>
    </button>

    <button n="2">
        <desc>Flaps Up</desc>
        <repeatable>false</repeatable>
        <binding>
            <command>nasal</command>
            <script>controls.flapsDown(-1);</script>
        </binding>
        <mod-up>
            <binding>
                <command>nasal</command>
                <script>controls.flapsDown(0);</script>
            </binding>
        </mod-up>
    </button>

    <button n="3">
        <desc>Increase throttle</desc>
        <repeatable>true</repeatable>
        <binding>
            <command>nasal</command>
            <script>controls.incThrottle(0.005, 1.0)</script>
        </binding>
    </button>

    <button n="4">
        <desc>sequence through engine startup/shutdown</desc>
        <repeatable>false</repeatable>
        <binding>
            <command>nasal</command>
            <script>
                <![CDATA[ 
					if (getprop("/sim/aircraft") == "dhc2F")
					{
						if (engineState == 0)
						{
							gui.popupTip(sprintf("Fuel ON"), 2);
							setprop("/controls/gear/water-rudder", 1);
							engineState = 1;
						}
						else if (engineState == 1)
						{
							gui.popupTip(sprintf("Mixture RICH"), 3);
							setprop("/controls/mixture", 1);
							engineState = 2;
						}
						else if (engineState == 2)
						{
							gui.popupTip(sprintf("Master ON"), 3);
							setprop("/controls/gear/gear-down", 0);
							engineState = 3;
						}
						else if (engineState == 3)
						{
							gui.popupTip(sprintf("Alternator ON"), 2);
							setprop("/controls/gear/water-rudder", 0);
							engineState = 4;
						}
						else if (engineState == 4)
						{
							gui.popupTip(sprintf("Mags BOTH"), 2);
							setprop("/controls/magnetos", 3);
							engineState = 5;
						}
						else if (engineState == 5)
						{
							gui.popupTip(sprintf("Starting . . . "), 2);
							controls.startEngine(1);
						}
						else if (engineState == 6)
						{
							gui.popupTip(sprintf("Mags OFF"), 2);
							setprop("/controls/magnetos", 0);
							engineState = 7;
						}
						else if (engineState == 7)
						{
							gui.popupTip(sprintf("Mags BOTH"), 2);
							setprop("/controls/magnetos", 3);
							engineState = 8;
						}
						else if (engineState == 8)
						{
							gui.popupTip(sprintf("Mixture LEAN"), 2);
							setprop("/controls/mixture", 0);
							engineState = 9;
						}
						else if (engineState == 9)
						{
							gui.popupTip(sprintf("Mags OFF"), 2);
							setprop("/controls/magnetos", 0);
							engineState = 10;
						}
						else if (engineState == 10)
						{
							gui.popupTip(sprintf("Alternator OFF"), 2);
							setprop("/controls/gear/water-rudder", 0);
							engineState = 11;
						}
						else if (engineState == 11)
						{
							gui.popupTip(sprintf("Master OFF"), 2);
							setprop("/controls/gear/water-rudder", 0);
							engineState = 12;
						}
						else if (engineState == 12)
						{
							gui.popupTip(sprintf("Fuel OFF"), 2);
							setprop("/controls/gear/water-rudder", 0);
							engineState = 0;
						}
					}
					else
					{
						if (getprop("/controls/gear/gear-down"))
						{
							gui.popupTip(sprintf("Raising gear"), 2);
						}
						else
						{
							gui.popupTip(sprintf("Lowering gear"), 2);
						}
						controls.gearToggle();
					}
                ]]>
            </script>
        </binding>
        <mod-up>
            <binding>
                <command>nasal</command>
                <script>
                    controls.startEngine(0);
					engineState = 6;
                </script>
            </binding>
        </button>
    
    
    <button n="5">
        <desc>Toggle gear when airborne, apply brakes when on ground</desc>
        <repeatable>false</repeatable>
        <binding>
            <command>nasal</command>
            <script>
                <![CDATA[ 
                    if (getprop("/position/gear-agl-ft") > 10.0)
                    {
                        if (getprop("/controls/gear/gear-down"))
                        {
                            gui.popupTip(sprintf("Raising gear"), 2);
                        } else {
                            gui.popupTip(sprintf("Lowering gear"), 2);
                        }
                        controls.gearToggle();
                    }
                    else
                    {
                        if (getprop("/gear/gear/ground-is-solid"))
                        {
                            controls.applyBrakes(1);
			    setprop("/controls/gear/brake-parking", 0);
			}
                        else
                        {
                            if (getprop("/sim/aircraft") == "dhc2F")
                            {
                                if (gearState == 0)
                                {
                                    gui.popupTip(sprintf("Lowering water rudders"), 2);
                                    setprop("/controls/gear/water-rudder", 1);
                                    gearState = 1;
                                }
                                else if (gearState == 1)
                                {
                                    gui.popupTip(sprintf("Lowering gear"), 3);
                                    setprop("/controls/gear/gear-down", 1);
                                    gearState = 2;
                                }
                                else if (gearState == 2)
                                {
                                    gui.popupTip(sprintf("Raising gear"), 3);
                                    setprop("/controls/gear/gear-down", 0);
                                    gearState = 3;
                                }
                                else if (gearState == 3)
                                {
                                    gui.popupTip(sprintf("Raising water rudders"), 2);
                                    setprop("/controls/gear/water-rudder", 0);
                                    gearState = 0;
                                }
                            }
                            else
                            {
                                if (getprop("/controls/gear/gear-down"))
                                {
                                    gui.popupTip(sprintf("Raising gear"), 2);
                                }
                                else
                                {
                                    gui.popupTip(sprintf("Lowering gear"), 2);
                                }
                                controls.gearToggle();
                            }
                        }
                    }
                ]]>
            </script>
        </binding>
        <mod-up>
            <binding>
                <command>nasal</command>
                <script>
                    <![CDATA[ 
                        if (getprop("/position/gear-agl-ft") < 1.0)
                        {
                            if (getprop("/gear/gear/ground-is-solid"))
                            {
                                controls.applyBrakes(0);
                            }
                        }
                    ]]>
                </script>
            </binding>
        </mod-up>
        <double-click>
            <time type="double">0.3</time>
            <binding>
                <command>nasal</command>
                <script>
                gui.popupTip(sprintf("Try to toggle parking brake"), 2);
                    <![CDATA[ 
                        if ((getprop("/gear/gear/ground-is-solid") and 
                            (getprop("/position/gear-agl-ft") < 1.0))
                        {
                            brake = !getprop("/controls/gear/brake-parking");
                            setprop("/controls/gear/brake-parking", brake);
                            if (brake)
                            {
                                gui.popupTip(sprintf("Parking Brake ON"), 2);
                            } 
                            else 
                            {
                                gui.popupTip(sprintf("Parking Brake OFF"), 2);
                            }
                        }
                    ]]>
                </script>
            </binding>
        </double-click>
    </button>

    <button n="6">
        <desc>View Cycle Forwards</desc>
        <binding>
            <command>nasal</command>
            <script>view.stepView(1);</script>
        </binding>
        <repeatable>false</repeatable>
    </button>
  
  <!--rocker - lateral axis-->
   <axis n="6">
       <desc>View Direction</desc>
      <direction>left</direction>
      <low>
        <repeatable>true</repeatable>
        <binding>
   	   <command>property-adjust</command>
   	   <property>/controls/flight/aileron-trim</property>
   	   <step type="double">-0.001</step>
        </binding>
      </low>
      <high>
        <repeatable>true</repeatable>
        <binding>
   	   <command>property-adjust</command>
   	   <property>/controls/flight/aileron-trim</property>
   	   <step type="double">0.001</step>
        </binding>
      </high>
   </axis>
  
  <!--rocker - vertical axis-->
   <axis n="7">
       <desc>View Direction</desc>
      <direction>upward</direction>
      <low>
        <repeatable>true</repeatable>
        <binding>
   	   <command>property-adjust</command>
   	   <property>/controls/flight/elevator-trim</property>
   	   <step type="double">-0.001</step>
        </binding>
      </low>
      <high>
        <repeatable>true</repeatable>
        <binding>
   	   <command>property-adjust</command>
   	   <property>/controls/flight/elevator-trim</property>
   	   <step type="double">0.001</step>
        </binding>
      </high>
   </axis>
  

</PropertyList>
